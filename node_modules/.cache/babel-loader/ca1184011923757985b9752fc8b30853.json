{"ast":null,"code":"import _classCallCheck from \"/project/sprinttracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/project/sprinttracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nexport var MonotonicInterpolant = /*#__PURE__*/function () {\n  function MonotonicInterpolant(xs, ys) {\n    _classCallCheck(this, MonotonicInterpolant);\n    var length = xs.length;\n    // Rearrange xs and ys so that xs is sorted\n    var indexes = [];\n    for (var i = 0; i < length; i++) {\n      indexes.push(i);\n    }\n    indexes.sort(function (a, b) {\n      return xs[a] < xs[b] ? -1 : 1;\n    });\n    // Get consecutive differences and slopes\n    var dys = [];\n    var dxs = [];\n    var ms = [];\n    var dx;\n    var dy;\n    for (var i1 = 0; i1 < length - 1; i1++) {\n      dx = xs[i1 + 1] - xs[i1];\n      dy = ys[i1 + 1] - ys[i1];\n      dxs.push(dx);\n      dys.push(dy);\n      ms.push(dy / dx);\n    }\n    // Get degree-1 coefficients\n    var c1s = [ms[0]];\n    for (var i2 = 0; i2 < dxs.length - 1; i2++) {\n      var m2 = ms[i2];\n      var mNext = ms[i2 + 1];\n      if (m2 * mNext <= 0) {\n        c1s.push(0);\n      } else {\n        dx = dxs[i2];\n        var dxNext = dxs[i2 + 1];\n        var common = dx + dxNext;\n        c1s.push(3 * common / ((common + dxNext) / m2 + (common + dx) / mNext));\n      }\n    }\n    c1s.push(ms[ms.length - 1]);\n    // Get degree-2 and degree-3 coefficients\n    var c2s = [];\n    var c3s = [];\n    var m;\n    for (var i3 = 0; i3 < c1s.length - 1; i3++) {\n      m = ms[i3];\n      var c1 = c1s[i3];\n      var invDx = 1 / dxs[i3];\n      var _common = c1 + c1s[i3 + 1] - m - m;\n      c2s.push((m - c1 - _common) * invDx);\n      c3s.push(_common * invDx * invDx);\n    }\n    this.xs = xs;\n    this.ys = ys;\n    this.c1s = c1s;\n    this.c2s = c2s;\n    this.c3s = c3s;\n  }\n  _createClass(MonotonicInterpolant, [{\n    key: \"interpolate\",\n    value: function interpolate(x) {\n      var xs = this.xs,\n        ys = this.ys,\n        c1s = this.c1s,\n        c2s = this.c2s,\n        c3s = this.c3s;\n      // The rightmost point in the dataset should give an exact result\n      var i = xs.length - 1;\n      if (x === xs[i]) {\n        return ys[i];\n      }\n      // Search for the interval x is in, returning the corresponding y if x is one of the original xs\n      var low = 0;\n      var high = c3s.length - 1;\n      var mid;\n      while (low <= high) {\n        mid = Math.floor(0.5 * (low + high));\n        var xHere = xs[mid];\n        if (xHere < x) {\n          low = mid + 1;\n        } else if (xHere > x) {\n          high = mid - 1;\n        } else {\n          return ys[mid];\n        }\n      }\n      i = Math.max(0, high);\n      // Interpolate\n      var diff = x - xs[i];\n      var diffSq = diff * diff;\n      return ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq;\n    }\n  }]);\n  return MonotonicInterpolant;\n}();","map":{"version":3,"sources":["../src/MonotonicInterpolant.ts"],"names":["MonotonicInterpolant","xs","ys","length","indexes","i","push","sort","a","b","dys","dxs","ms","dx","dy","c1s","m2","mNext","dxNext","common","c2s","c3s","m","c1","invDx","interpolate","x","low","high","mid","Math","floor","xHere","max","diff","diffSq"],"mappings":"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","sourcesContent":["export class MonotonicInterpolant {\n\tprivate xs: any\n\tprivate ys: any\n\tprivate c1s: any\n\tprivate c2s: any\n\tprivate c3s: any\n\n\tpublic constructor(xs: number[], ys: number[]) {\n\t\tconst { length } = xs\n\n\t\t// Rearrange xs and ys so that xs is sorted\n\t\tconst indexes = []\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tindexes.push(i)\n\t\t}\n\t\tindexes.sort((a, b) => ((xs[a] as number) < (xs[b] as number) ? -1 : 1))\n\n\t\t// Get consecutive differences and slopes\n\t\tconst dys = []\n\t\tconst dxs = []\n\t\tconst ms = []\n\t\tlet dx\n\t\tlet dy\n\t\tfor (let i = 0; i < length - 1; i++) {\n\t\t\tdx = (xs[i + 1] as number) - (xs[i] as number)\n\t\t\tdy = (ys[i + 1] as number) - (ys[i] as number)\n\t\t\tdxs.push(dx)\n\t\t\tdys.push(dy)\n\t\t\tms.push(dy / dx)\n\t\t}\n\n\t\t// Get degree-1 coefficients\n\t\tconst c1s = [ms[0]]\n\t\tfor (let i = 0; i < dxs.length - 1; i++) {\n\t\t\tconst m2 = ms[i] as number\n\t\t\tconst mNext = ms[i + 1] as number\n\t\t\tif (m2 * mNext <= 0) {\n\t\t\t\tc1s.push(0)\n\t\t\t} else {\n\t\t\t\tdx = dxs[i] as number\n\t\t\t\tconst dxNext = dxs[i + 1] as number\n\t\t\t\tconst common = dx + dxNext\n\t\t\t\tc1s.push(\n\t\t\t\t\t(3 * common) / ((common + dxNext) / m2 + (common + dx) / mNext),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tc1s.push(ms[ms.length - 1])\n\n\t\t// Get degree-2 and degree-3 coefficients\n\t\tconst c2s = []\n\t\tconst c3s = []\n\t\tlet m\n\t\tfor (let i = 0; i < c1s.length - 1; i++) {\n\t\t\tm = ms[i] as number\n\t\t\tconst c1 = c1s[i] as number\n\t\t\tconst invDx = 1 / (dxs[i] as number)\n\t\t\tconst common = c1 + (c1s[i + 1] as number) - m - m\n\t\t\tc2s.push((m - c1 - common) * invDx)\n\t\t\tc3s.push(common * invDx * invDx)\n\t\t}\n\n\t\tthis.xs = xs\n\t\tthis.ys = ys\n\t\tthis.c1s = c1s\n\t\tthis.c2s = c2s\n\t\tthis.c3s = c3s\n\t}\n\n\tpublic interpolate(x: number): number {\n\t\tconst { xs, ys, c1s, c2s, c3s } = this\n\n\t\t// The rightmost point in the dataset should give an exact result\n\t\tlet i = xs.length - 1\n\t\tif (x === xs[i]) {\n\t\t\treturn ys[i]\n\t\t}\n\n\t\t// Search for the interval x is in, returning the corresponding y if x is one of the original xs\n\t\tlet low = 0\n\t\tlet high = c3s.length - 1\n\t\tlet mid\n\t\twhile (low <= high) {\n\t\t\tmid = Math.floor(0.5 * (low + high))\n\t\t\tconst xHere = xs[mid]\n\t\t\tif (xHere < x) {\n\t\t\t\tlow = mid + 1\n\t\t\t} else if (xHere > x) {\n\t\t\t\thigh = mid - 1\n\t\t\t} else {\n\t\t\t\treturn ys[mid]\n\t\t\t}\n\t\t}\n\t\ti = Math.max(0, high)\n\n\t\t// Interpolate\n\t\tconst diff = x - xs[i]\n\t\tconst diffSq = diff * diff\n\t\treturn ys[i] + c1s[i] * diff + c2s[i] * diffSq + c3s[i] * diff * diffSq\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}