{"ast":null,"code":"import _classCallCheck from \"/project/sprinttracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/project/sprinttracker/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { invariant } from '@react-dnd/invariant';\nimport { getDifferenceFromInitialOffset as _getDifferenceFromInitialOffset, getSourceClientOffset as _getSourceClientOffset } from '../utils/coords.js';\nimport { areDirty } from '../utils/dirtiness.js';\nimport { matchesType } from '../utils/matchesType.js';\nexport var DragDropMonitorImpl = /*#__PURE__*/function () {\n  function DragDropMonitorImpl(store, registry) {\n    _classCallCheck(this, DragDropMonitorImpl);\n    this.store = store;\n    this.registry = registry;\n  }\n  _createClass(DragDropMonitorImpl, [{\n    key: \"subscribeToStateChange\",\n    value: function subscribeToStateChange(listener) {\n      var _this = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var handlerIds = options.handlerIds;\n      invariant(typeof listener === 'function', 'listener must be a function.');\n      invariant(typeof handlerIds === 'undefined' || Array.isArray(handlerIds), 'handlerIds, when specified, must be an array of strings.');\n      var prevStateId = this.store.getState().stateId;\n      var handleChange = function handleChange() {\n        var state = _this.store.getState();\n        var currentStateId = state.stateId;\n        try {\n          var canSkipListener = currentStateId === prevStateId || currentStateId === prevStateId + 1 && !areDirty(state.dirtyHandlerIds, handlerIds);\n          if (!canSkipListener) {\n            listener();\n          }\n        } finally {\n          prevStateId = currentStateId;\n        }\n      };\n      return this.store.subscribe(handleChange);\n    }\n  }, {\n    key: \"subscribeToOffsetChange\",\n    value: function subscribeToOffsetChange(listener) {\n      var _this2 = this;\n      invariant(typeof listener === 'function', 'listener must be a function.');\n      var previousState = this.store.getState().dragOffset;\n      var handleChange = function handleChange() {\n        var nextState = _this2.store.getState().dragOffset;\n        if (nextState === previousState) {\n          return;\n        }\n        previousState = nextState;\n        listener();\n      };\n      return this.store.subscribe(handleChange);\n    }\n  }, {\n    key: \"canDragSource\",\n    value: function canDragSource(sourceId) {\n      if (!sourceId) {\n        return false;\n      }\n      var source = this.registry.getSource(sourceId);\n      invariant(source, \"Expected to find a valid source. sourceId=\".concat(sourceId));\n      if (this.isDragging()) {\n        return false;\n      }\n      return source.canDrag(this, sourceId);\n    }\n  }, {\n    key: \"canDropOnTarget\",\n    value: function canDropOnTarget(targetId) {\n      // undefined on initial render\n      if (!targetId) {\n        return false;\n      }\n      var target = this.registry.getTarget(targetId);\n      invariant(target, \"Expected to find a valid target. targetId=\".concat(targetId));\n      if (!this.isDragging() || this.didDrop()) {\n        return false;\n      }\n      var targetType = this.registry.getTargetType(targetId);\n      var draggedItemType = this.getItemType();\n      return matchesType(targetType, draggedItemType) && target.canDrop(this, targetId);\n    }\n  }, {\n    key: \"isDragging\",\n    value: function isDragging() {\n      return Boolean(this.getItemType());\n    }\n  }, {\n    key: \"isDraggingSource\",\n    value: function isDraggingSource(sourceId) {\n      // undefined on initial render\n      if (!sourceId) {\n        return false;\n      }\n      var source = this.registry.getSource(sourceId, true);\n      invariant(source, \"Expected to find a valid source. sourceId=\".concat(sourceId));\n      if (!this.isDragging() || !this.isSourcePublic()) {\n        return false;\n      }\n      var sourceType = this.registry.getSourceType(sourceId);\n      var draggedItemType = this.getItemType();\n      if (sourceType !== draggedItemType) {\n        return false;\n      }\n      return source.isDragging(this, sourceId);\n    }\n  }, {\n    key: \"isOverTarget\",\n    value: function isOverTarget(targetId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        shallow: false\n      };\n      // undefined on initial render\n      if (!targetId) {\n        return false;\n      }\n      var shallow = options.shallow;\n      if (!this.isDragging()) {\n        return false;\n      }\n      var targetType = this.registry.getTargetType(targetId);\n      var draggedItemType = this.getItemType();\n      if (draggedItemType && !matchesType(targetType, draggedItemType)) {\n        return false;\n      }\n      var targetIds = this.getTargetIds();\n      if (!targetIds.length) {\n        return false;\n      }\n      var index = targetIds.indexOf(targetId);\n      if (shallow) {\n        return index === targetIds.length - 1;\n      } else {\n        return index > -1;\n      }\n    }\n  }, {\n    key: \"getItemType\",\n    value: function getItemType() {\n      return this.store.getState().dragOperation.itemType;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem() {\n      return this.store.getState().dragOperation.item;\n    }\n  }, {\n    key: \"getSourceId\",\n    value: function getSourceId() {\n      return this.store.getState().dragOperation.sourceId;\n    }\n  }, {\n    key: \"getTargetIds\",\n    value: function getTargetIds() {\n      return this.store.getState().dragOperation.targetIds;\n    }\n  }, {\n    key: \"getDropResult\",\n    value: function getDropResult() {\n      return this.store.getState().dragOperation.dropResult;\n    }\n  }, {\n    key: \"didDrop\",\n    value: function didDrop() {\n      return this.store.getState().dragOperation.didDrop;\n    }\n  }, {\n    key: \"isSourcePublic\",\n    value: function isSourcePublic() {\n      return Boolean(this.store.getState().dragOperation.isSourcePublic);\n    }\n  }, {\n    key: \"getInitialClientOffset\",\n    value: function getInitialClientOffset() {\n      return this.store.getState().dragOffset.initialClientOffset;\n    }\n  }, {\n    key: \"getInitialSourceClientOffset\",\n    value: function getInitialSourceClientOffset() {\n      return this.store.getState().dragOffset.initialSourceClientOffset;\n    }\n  }, {\n    key: \"getClientOffset\",\n    value: function getClientOffset() {\n      return this.store.getState().dragOffset.clientOffset;\n    }\n  }, {\n    key: \"getSourceClientOffset\",\n    value: function getSourceClientOffset() {\n      return _getSourceClientOffset(this.store.getState().dragOffset);\n    }\n  }, {\n    key: \"getDifferenceFromInitialOffset\",\n    value: function getDifferenceFromInitialOffset() {\n      return _getDifferenceFromInitialOffset(this.store.getState().dragOffset);\n    }\n  }]);\n  return DragDropMonitorImpl;\n}();","map":{"version":3,"sources":["../../src/classes/DragDropMonitorImpl.ts"],"names":["invariant","getDifferenceFromInitialOffset","getSourceClientOffset","areDirty","matchesType","DragDropMonitorImpl","store","registry","subscribeToStateChange","listener","options","handlerIds","Array","isArray","prevStateId","getState","stateId","handleChange","state","currentStateId","canSkipListener","dirtyHandlerIds","subscribe","subscribeToOffsetChange","previousState","dragOffset","nextState","canDragSource","sourceId","source","getSource","isDragging","canDrag","canDropOnTarget","targetId","target","getTarget","didDrop","targetType","getTargetType","draggedItemType","getItemType","canDrop","Boolean","isDraggingSource","isSourcePublic","sourceType","getSourceType","isOverTarget","shallow","targetIds","getTargetIds","length","index","indexOf","dragOperation","itemType","getItem","item","getSourceId","getDropResult","dropResult","getInitialClientOffset","initialClientOffset","getInitialSourceClientOffset","initialSourceClientOffset","getClientOffset","clientOffset"],"mappings":"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","sourcesContent":["import { invariant } from '@react-dnd/invariant'\nimport type { Store } from 'redux'\n\nimport type {\n\tDragDropMonitor,\n\tHandlerRegistry,\n\tIdentifier,\n\tListener,\n\tUnsubscribe,\n\tXYCoord,\n} from '../interfaces.js'\nimport type { State } from '../reducers/index.js'\nimport {\n\tgetDifferenceFromInitialOffset,\n\tgetSourceClientOffset,\n} from '../utils/coords.js'\nimport { areDirty } from '../utils/dirtiness.js'\nimport { matchesType } from '../utils/matchesType.js'\n\nexport class DragDropMonitorImpl implements DragDropMonitor {\n\tprivate store: Store<State>\n\tpublic readonly registry: HandlerRegistry\n\n\tpublic constructor(store: Store<State>, registry: HandlerRegistry) {\n\t\tthis.store = store\n\t\tthis.registry = registry\n\t}\n\n\tpublic subscribeToStateChange(\n\t\tlistener: Listener,\n\t\toptions: { handlerIds?: string[] } = {},\n\t): Unsubscribe {\n\t\tconst { handlerIds } = options\n\t\tinvariant(typeof listener === 'function', 'listener must be a function.')\n\t\tinvariant(\n\t\t\ttypeof handlerIds === 'undefined' || Array.isArray(handlerIds),\n\t\t\t'handlerIds, when specified, must be an array of strings.',\n\t\t)\n\n\t\tlet prevStateId = this.store.getState().stateId\n\t\tconst handleChange = () => {\n\t\t\tconst state = this.store.getState()\n\t\t\tconst currentStateId = state.stateId\n\t\t\ttry {\n\t\t\t\tconst canSkipListener =\n\t\t\t\t\tcurrentStateId === prevStateId ||\n\t\t\t\t\t(currentStateId === prevStateId + 1 &&\n\t\t\t\t\t\t!areDirty(state.dirtyHandlerIds, handlerIds))\n\n\t\t\t\tif (!canSkipListener) {\n\t\t\t\t\tlistener()\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tprevStateId = currentStateId\n\t\t\t}\n\t\t}\n\n\t\treturn this.store.subscribe(handleChange)\n\t}\n\n\tpublic subscribeToOffsetChange(listener: Listener): Unsubscribe {\n\t\tinvariant(typeof listener === 'function', 'listener must be a function.')\n\n\t\tlet previousState = this.store.getState().dragOffset\n\t\tconst handleChange = () => {\n\t\t\tconst nextState = this.store.getState().dragOffset\n\t\t\tif (nextState === previousState) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tpreviousState = nextState\n\t\t\tlistener()\n\t\t}\n\n\t\treturn this.store.subscribe(handleChange)\n\t}\n\n\tpublic canDragSource(sourceId: string | undefined): boolean {\n\t\tif (!sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tconst source = this.registry.getSource(sourceId)\n\t\tinvariant(source, `Expected to find a valid source. sourceId=${sourceId}`)\n\n\t\tif (this.isDragging()) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn source.canDrag(this, sourceId)\n\t}\n\n\tpublic canDropOnTarget(targetId: string | undefined): boolean {\n\t\t// undefined on initial render\n\t\tif (!targetId) {\n\t\t\treturn false\n\t\t}\n\t\tconst target = this.registry.getTarget(targetId)\n\t\tinvariant(target, `Expected to find a valid target. targetId=${targetId}`)\n\n\t\tif (!this.isDragging() || this.didDrop()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst targetType = this.registry.getTargetType(targetId)\n\t\tconst draggedItemType = this.getItemType()\n\t\treturn (\n\t\t\tmatchesType(targetType, draggedItemType) && target.canDrop(this, targetId)\n\t\t)\n\t}\n\n\tpublic isDragging(): boolean {\n\t\treturn Boolean(this.getItemType())\n\t}\n\n\tpublic isDraggingSource(sourceId: string | undefined): boolean {\n\t\t// undefined on initial render\n\t\tif (!sourceId) {\n\t\t\treturn false\n\t\t}\n\t\tconst source = this.registry.getSource(sourceId, true)\n\t\tinvariant(source, `Expected to find a valid source. sourceId=${sourceId}`)\n\n\t\tif (!this.isDragging() || !this.isSourcePublic()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst sourceType = this.registry.getSourceType(sourceId)\n\t\tconst draggedItemType = this.getItemType()\n\t\tif (sourceType !== draggedItemType) {\n\t\t\treturn false\n\t\t}\n\n\t\treturn source.isDragging(this, sourceId)\n\t}\n\n\tpublic isOverTarget(\n\t\ttargetId: string | undefined,\n\t\toptions = { shallow: false },\n\t): boolean {\n\t\t// undefined on initial render\n\t\tif (!targetId) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst { shallow } = options\n\t\tif (!this.isDragging()) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst targetType = this.registry.getTargetType(targetId)\n\t\tconst draggedItemType = this.getItemType()\n\t\tif (draggedItemType && !matchesType(targetType, draggedItemType)) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst targetIds = this.getTargetIds()\n\t\tif (!targetIds.length) {\n\t\t\treturn false\n\t\t}\n\n\t\tconst index = targetIds.indexOf(targetId)\n\t\tif (shallow) {\n\t\t\treturn index === targetIds.length - 1\n\t\t} else {\n\t\t\treturn index > -1\n\t\t}\n\t}\n\n\tpublic getItemType(): Identifier {\n\t\treturn this.store.getState().dragOperation.itemType as Identifier\n\t}\n\n\tpublic getItem(): any {\n\t\treturn this.store.getState().dragOperation.item\n\t}\n\n\tpublic getSourceId(): string | null {\n\t\treturn this.store.getState().dragOperation.sourceId\n\t}\n\n\tpublic getTargetIds(): string[] {\n\t\treturn this.store.getState().dragOperation.targetIds\n\t}\n\n\tpublic getDropResult(): any {\n\t\treturn this.store.getState().dragOperation.dropResult\n\t}\n\n\tpublic didDrop(): boolean {\n\t\treturn this.store.getState().dragOperation.didDrop\n\t}\n\n\tpublic isSourcePublic(): boolean {\n\t\treturn Boolean(this.store.getState().dragOperation.isSourcePublic)\n\t}\n\n\tpublic getInitialClientOffset(): XYCoord | null {\n\t\treturn this.store.getState().dragOffset.initialClientOffset\n\t}\n\n\tpublic getInitialSourceClientOffset(): XYCoord | null {\n\t\treturn this.store.getState().dragOffset.initialSourceClientOffset\n\t}\n\n\tpublic getClientOffset(): XYCoord | null {\n\t\treturn this.store.getState().dragOffset.clientOffset\n\t}\n\n\tpublic getSourceClientOffset(): XYCoord | null {\n\t\treturn getSourceClientOffset(this.store.getState().dragOffset)\n\t}\n\n\tpublic getDifferenceFromInitialOffset(): XYCoord | null {\n\t\treturn getDifferenceFromInitialOffset(this.store.getState().dragOffset)\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}