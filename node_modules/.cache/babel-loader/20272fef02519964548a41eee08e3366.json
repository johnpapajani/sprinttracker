{"ast":null,"code":"// cheap lodash replacements\nexport function memoize(fn) {\n  var result = null;\n  var memoized = function memoized() {\n    if (result == null) {\n      result = fn();\n    }\n    return result;\n  };\n  return memoized;\n}\n/**\n * drop-in replacement for _.without\n */\nexport function without(items, item) {\n  return items.filter(function (i) {\n    return i !== item;\n  });\n}\nexport function union(itemsA, itemsB) {\n  var set = new Set();\n  var insertItem = function insertItem(item) {\n    return set.add(item);\n  };\n  itemsA.forEach(insertItem);\n  itemsB.forEach(insertItem);\n  var result = [];\n  set.forEach(function (key) {\n    return result.push(key);\n  });\n  return result;\n}","map":{"version":3,"sources":["../../src/utils/js_utils.ts"],"names":["memoize","fn","result","memoized","without","items","item","filter","i","union","itemsA","itemsB","set","Set","insertItem","add","forEach","key","push"],"mappings":"AAAA;AAEA,OAAO,SAASA,OAAO,CAAIC,EAAW,EAAW;EAChD,IAAIC,MAAM,GAAa,IAAI;EAC3B,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,GAAS;IACtB,IAAID,MAAM,IAAI,IAAI,EAAE;MACnBA,MAAM,GAAGD,EAAE,EAAE;IACb;IACD,OAAOC,MAAM;GACb;EACD,OAAOC,QAAQ;AACf;AAED;;AAEG;AACH,OAAO,SAASC,OAAO,CAAIC,KAAU,EAAEC,IAAO,EAAE;EAC/C,OAAOD,KAAK,CAACE,MAAM,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,KAAKF,IAAI;EAAA,EAAC;AACtC;AAED,OAAO,SAASG,KAAK,CAA4BC,MAAW,EAAEC,MAAW,EAAE;EAC1E,IAAMC,GAAG,GAAG,IAAIC,GAAG,EAAK;EACxB,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAIR,IAAO;IAAA,OAAKM,GAAG,CAACG,GAAG,CAACT,IAAI,CAAC;EAAA;EAC7CI,MAAM,CAACM,OAAO,CAACF,UAAU,CAAC;EAC1BH,MAAM,CAACK,OAAO,CAACF,UAAU,CAAC;EAE1B,IAAMZ,MAAM,GAAQ,EAAE;EACtBU,GAAG,CAACI,OAAO,CAAC,UAACC,GAAG;IAAA,OAAKf,MAAM,CAACgB,IAAI,CAACD,GAAG,CAAC;EAAA,EAAC;EACtC,OAAOf,MAAM;AACb","sourcesContent":["// cheap lodash replacements\n\nexport function memoize<T>(fn: () => T): () => T {\n\tlet result: T | null = null\n\tconst memoized = () => {\n\t\tif (result == null) {\n\t\t\tresult = fn()\n\t\t}\n\t\treturn result\n\t}\n\treturn memoized\n}\n\n/**\n * drop-in replacement for _.without\n */\nexport function without<T>(items: T[], item: T) {\n\treturn items.filter((i) => i !== item)\n}\n\nexport function union<T extends string | number>(itemsA: T[], itemsB: T[]) {\n\tconst set = new Set<T>()\n\tconst insertItem = (item: T) => set.add(item)\n\titemsA.forEach(insertItem)\n\titemsB.forEach(insertItem)\n\n\tconst result: T[] = []\n\tset.forEach((key) => result.push(key))\n\treturn result\n}\n"]},"metadata":{},"sourceType":"module"}